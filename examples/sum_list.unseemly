let_type List = forall T . mu_type List . { +[Nil]+ +[Cons T List<T>]+ }
in
let_type ListUF = forall T . { +[Nil]+ +[Cons T List<T>]+ }
in
(.[ list_123 : List<Int> . ((fix
    .[again : [-> [List<Int> -> Int]] .
        .[ lst : List<Int> .
            match unfold lst { +[Nil]+ => zero
                               +[Cons hd tl]+ => (plus hd ((again) tl))} ]. ]. )
     list_123)].
  fold +[Cons one
      fold +[Cons two
          fold +[Cons three fold +[Nil]+
              : ListUF<Int> : List<Int> ]+
          : ListUF<Int> : List<Int>]+ : ListUF<Int> : List<Int>]+
      : ListUF<Int> : List<Int> )
